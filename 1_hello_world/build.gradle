task hello {
    doLast {
        println 'Hello world!'
    }
}
// task helloSyntaxSuger << {
//     println 'Hello world!'
// }

task hoge {
    doLast {
        String fuga = 'fuga'
        int count = 9
        println 'hoge,' + fuga + ',piyo'
        println count
        println count.toString()
    }
}

task counter {
    doLast {
        3.times {
            println it
        }
    }
}

// //////////////////////////////////////////////
// 依存関係の記述
//  依存元を先行して記述しないとエラーとなる
//  ex) relax -> enterMyRoom -> unlockDoorの順序
// //////////////////////////////////////////////
task unlockDoor {
    doLast {
        println "I unlock the door"
    }
}
task enterMyRoom(dependsOn: unlockDoor) {
    doLast {
        println "I'm home"
    }
}
task relax(dependsOn: enterMyRoom) {
    doLast {
        println "Relax..."
    }
}

// //////////////////////////////////////////////
// 依存関係の記述の別定義
// //////////////////////////////////////////////
task unlockDoor2 {
    doLast {
        println "I unlock the door"
    }
}
task enterMyRoom2 {
    doLast {
        println "I'm home"
    }
}
task relax2 {
    doLast {
        println "Relax..."
    }
}

enterMyRoom2.dependsOn unlockDoor2
relax2.dependsOn enterMyRoom2
// 全てを記述しなくても良い
// relax2.dependsOn unlockDoor2, enterMyRoom2

// //////////////////////////////////////////////
// taskの前後に処理を差し込む
// //////////////////////////////////////////////
task samplebf {
    doLast {
        println "hoge"
    }
}
samplebf.doFirst {
    println "..."
}
samplebf.doFirst {
    println "hello!"
}
samplebf.doLast {
    println "fuga"
}
samplebf.doLast {
    println "piyo"
}